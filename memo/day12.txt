Day12

0. 지난 학습 review
1. Class
2. Exception

0. Day1 review
(1) 클래스, 객체, 객체지향
    변수 : 하나의 값만 저장
    배열 : 여러 개의 값만 저장
    구조체 : 여러 형태의 값을 저장
    클래스 : 값 + 기능(Function)을 저장

(2) 클래스와 객체
    클래스는 설계도(apple)
    객체는 실제 작품(an apple)

1. 클래스와 객체 실습
(1) 용어(term)
    1) 클래스(class)
        값(변수)와 기능(함수)로 구성
        그런데 이를 변수와 함수라 부르지 않음

    2) 메서드(Method)
       멤버 함수, 클래스가 가진 함수를 메서드라고 함

    3) 변수, 필드(Field)
       멤버변수, 변수, 클래스 가진 변수를 필드라고도 함

    4) 객체(Object)
       클래스(설계도)로 만들어지는 것
       클래스를 정의하고 클래스()를 선언하면 객체가 생성됨

    5) 인스턴스(Instance) - individual
       한마디로 객체
       클래스와의 관계를 표현할 때 인스턴스라는 표현을 씀
       man1 = new Human()
       ex) 자동차 클래스의 객체 트럭, 택시
           트럭 = new 자동차()
           택시 = new 자동차()
           트럭은 객체이다.
           트럭은 자동차의 인스턴스이다.

(2) 클래스 정의 문법
    class ClassName:
        <statement 1>
        .
        .
        <statement n>

(3) 객체 생성 문법
    변수 = ClassName()

(4) 첫 번째 클래스와 인스턴스 만들어보기
    class House :
        pass

    myhouse = House()

(5) 클래스의 변수
    1) 인스턴스 변수
       인스턴스(객체) 별로 다른 변수
       self.name과 같이 self. 가 붙은 변수

    2) 클래스 변수
       클래스 내부에 선언된 변수
       모든 인스턴스가 공유하는 변수
       self가 없음

(6) 생성자(Constructor)
    인스턴스가 만들어질 때 무조건 호출되는 함수
    함수명은 __init__(self)
    인사(파라미터) 부분을 수정하면 수정한 대로 생성해야 함
    같은 이름으로 생성하면 마지막 것으로 overwrite

(7) DocString
    클래스의 설명은
    클래스 선언 아래에 """~"""
    다른 곳에서 클래스명.__doc__으로 참조 가능

(8) self
    메서드명(self, param1, param2)의 경우
    인스턴스명.매서드명으로 호출하라는 의미이며 myhouse.get(1, 2)와 같이 인자는 2개

2. 예외 처리
(1) 예외(Exception)
    오류인데, 개발자가 처리 가능한 오류
    처리 불가능한 오류는 그냥 오류, 에러 error

(2) 사례
    0으로 나눗셈을 하려는 경우
    a = int(input("나누어지는 수를 입력하세요"))
    b = int(input("나눌 수를 입력하세요"))

    if b == 0
        print("0으로 나누시는 건 안돼요")
    else:
        print("{}/{} = {}".format(a, b, a/b))

    위와 같은 경우 모든 예외케이스를 내가 다 알아야 처리 가능

(3) 예외는 클래스로 관리되며
    모든 예외 클래스는 BaseException을 상속받으며 Exception 대부분의 예외가 포함

(4) 예외 처리 방식
    try:
        실행할 문장  # 혹시 모르는 오류나는 것들을 넣는다
    except 예외명 as e:
        예외명이 발생했을 떄 처리할 로직
    .
    .
    .
    except Exception as e:
        기타 예외 발생 시 처리 영역
    else:
        예외가 안나면 처리할 문장
    finally:
        예외가 나든 안나든 처리할 문장

(5) 강제로 예외 발생시키기
    파이썬이 발생시키는 오류가 아니라 사용자가 발생시키고 싶은 경우 # 호출하기만 해도 에러난다.
    raise 예외클래스()
    또는
    raise 예외클래스("문장")
